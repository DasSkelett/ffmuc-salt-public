{%- from "jitsi/map.jinja" import jitsi with context %}

-- enable websocket support
consider_websocket_secure = true;
cross_domain_websocket = true;

-- settings for bosh interface
cross_domain_bosh = false;
consider_bosh_secure = true;

-- domain mapper options, must at least have domain base set to use the mapper
muc_mapper_domain_base = "{{ jitsi.public_domain }}";

VirtualHost "{{ jitsi.xmpp.xmpp_domain }}"
    authentication = {% if jitsi.authentication %}"internal_plain"{% else %}"token"{% endif %}
    ssl = {
            key = "/etc/prosody/certs/{{ jitsi.public_domain }}.key";
            certificate = "/etc/prosody/certs/{{ jitsi.public_domain }}.crt";
    }
    speakerstats_component = "speakerstats.{{ jitsi.public_domain }}"
    conference_duration_component = "conferenceduration.{{ jitsi.public_domain }}"
    -- we need bosh
    modules_enabled = {
        "bosh";
        "websocket";
        {% if jitsi.lobby_enabled %}"muc_lobby_rooms";{% endif %}
        "ping"; -- Enable mod_ping
        "conference_duration";
        "speakerstats";
    }
    {%- if jitsi.lobby_enabled %}
    lobby_muc = "lobby.{{ jitsi.public_domain }}"
    main_muc = "conference.{{ jitsi.public_domain }}"
    {%- endif %}
    c2s_require_encryption = false
    app_id = ""
    app_secret = ""
    allow_empty_token = true

Component "conference.{{ jitsi.public_domain }}" "muc"
    storage = "memory"
    modules_enabled = {
        "muc_meeting_id";
        "muc_domain_mapper";
    }
    muc_room_cache_size = 10000
    muc_room_locking = false
    muc_room_default_public_jids = true

{% for domain in jitsi.subdomains %}
Component "conference.{{ domain }}.{{ jitsi.public_domain }}" "muc"
    storage = "memory"
    modules_enabled = {
        "muc_meeting_id";
        "muc_domain_mapper";
    }
    muc_room_cache_size = 10000
    muc_room_locking = false
    muc_room_default_public_jids = true
{% endfor %}

-- internal muc component
Component "internal.auth.{{ jitsi.public_domain }}" "muc"
    storage = "memory"
    modules_enabled = {
      "ping";
    }
    muc_room_cache_size = 10000

VirtualHost "{{ jitsi.xmpp.auth_domain }}"
    ssl = {
        key = "/etc/prosody/certs/{{ jitsi.xmpp.auth_domain }}.key";
        certificate = "/etc/prosody/certs/{{ jitsi.xmpp.auth_domain }}.crt";
    }
    authentication = "internal_plain"

-- Proxy to jicofo's user JID, so that it doesn't have to register as a component.
Component "focus.{{ jitsi.public_domain }}" "client_proxy"
    target_address = "{{ jitsi.jicofo.username }}@{{ jitsi.xmpp.auth_domain }}"

Component "speakerstats.{{ jitsi.public_domain }}" "speakerstats_component"
    muc_component = "conference.{{ jitsi.public_domain }}"

Component "conferenceduration.{{ jitsi.public_domain }}" "conference_duration_component"
    muc_component = "conference.{{ jitsi.public_domain }}"

{%- if jitsi.authentication %}
-- to allow guests to be able to join as well
VirtualHost "guest.{{ jitsi.public_domain }}"
    authentication = "anonymous"
    ssl = {
            key = "/etc/prosody/certs/{{ jitsi.public_domain }}.key";
            certificate = "/etc/prosody/certs/{{ jitsi.public_domain }}.crt";
    }
    speakerstats_component = "speakerstats.{{ jitsi.public_domain }}"
    conference_duration_component = "conferenceduration.{{ jitsi.public_domain }}"
    -- we need bosh
    modules_enabled = {
        "bosh";
        "websocket";
        "pubsub";
        "ping"; -- Enable mod_ping
        "speakerstats";
        "turncredentials";
        "conference_duration";
    }
    c2s_require_encryption = false
{% endif %}{# if guests_enabled #}

{%- if jitsi.lobby_enabled %}
Component "lobby.{{ jitsi.public_domain }}" "muc"
    storage = "memory"
    muc_room_cache_size = 10000
    restrict_room_creation = true
    muc_room_locking = false
    muc_room_default_public_jids = true
{% endif %}{# if lobby_enabled #}

{%- if jitsi.jibri_enabled %}
VirtualHost "recorder.{{ jitsi.public_domain }}"
    modules_enabled = {
        "ping";
    }
    authentication = "internal_plain"
    c2s_require_encryption = false
    allow_empty_token = true
{% endif %}{# recorder enabled #}
