{%- from "jitsi/map.jinja" import jitsi with context %}
jibri {
  // A unique identifier for this Jibri
  // TODO: eventually this will be required with no default
  id = "{{ grains.id }}"
  // Whether or not Jibri should return to idle state after handling
  // (successfully or unsuccessfully) a request.  A value of 'true'
  // here means that a Jibri will NOT return back to the IDLE state
  // and will need to be restarted in order to be used again.
  single-use-mode = false
  api {
    http {
      external-api-port = 2222
      internal-api-port = 3333
    }
    xmpp {
      // See example_xmpp_envs.conf for an example of what is expected here
      environments = [
{%- for shard in jitsi.xmpp.keys() %}
{%- if "shard" in shard %}
        {
          name = "{{ jitsi.jibri.xmpp.environment_name }}-{{ shard }}"
          xmpp-server-hosts = ["{{ jitsi.xmpp[shard].server_host }}"]
          xmpp-domain = "{{ jitsi.xmpp.xmpp_domain }}"

          control-muc {
              domain = "{{ jitsi.jibri.xmpp.control_muc.domain }}"
              room-name = "{{ jitsi.jibri.xmpp.control_muc.room_name | default(jitsi.jibri.brewery_room) }}"
              nickname = "{{ jitsi.jibri.xmpp.control_muc.nickname | default(jitsi.xmpp.muc_nickname) }}"
          }

          control-login {
              domain = "{{ jitsi.jibri.xmpp.control_login.domain }}"
              username = "{{ jitsi.jibri.xmpp.control_login.username }}"
              password = "{{ jitsi.jibri.xmpp.control_login.password }}"
          }

          call-login {
              domain = "{{ jitsi.jibri.xmpp.call_login.domain }}"
              username = "{{ jitsi.jibri.xmpp.call_login.username }}"
              password = "{{ jitsi.jibri.xmpp.call_login.password }}"
          }

          strip-from-room-domain = "conference."
          usage-timeout = 0
          trust-all-xmpp-certs = true
        }
{% endif %}{# if "shard" in shard #}
{%- endfor %}{# for shard #}
      ]
    }
  }
  recording {
    recordings-directory = "{{ jitsi.jibri.recording_directory }}"
    # TODO: make this an optional param and remove the default
    finalize-script = "{{ jitsi.jibri.finalize_recording_script_path }}"
  }
  streaming {
    // A list of regex patterns for allowed RTMP URLs.  The RTMP URL used
    // when starting a stream must match at least one of the patterns in
    // this list.
    rtmp-allow-list = [
      // By default, all services are allowed
      ".*"
    ]
  }
  chrome {
    // The flags which will be passed to chromium when launching
    flags = [
      "--use-fake-ui-for-media-stream",
      "--start-maximized",
      "--kiosk",
      "--enabled",
      "--disable-infobars",
      "--autoplay-policy=no-user-gesture-required"
    ]
  }
  stats {
    enable-stats-d = true
  }
  webhook {
    // A list of subscribers interested in receiving webhook events
    subscribers = []
  }
  call-status-checks {
    // If all clients have their audio and video muted and if Jibri does not
    // detect any data stream (audio or video) comming in, it will stop
    // recording after NO_MEDIA_TIMEOUT expires.
    no-media-timeout = 30 seconds

    // If all clients have their audio and video muted, Jibri consideres this
    // as an empty call and stops the recording after ALL_MUTED_TIMEOUT expires.
    all-muted-timeout = 10 minutes

    // When detecting if a call is empty, Jibri takes into consideration for how
    // long the call has been empty already. If it has been empty for more than
    // DEFAULT_CALL_EMPTY_TIMEOUT, it will consider it empty and stop the recording.
    default-call-empty-timeout = 30 seconds
  }
}