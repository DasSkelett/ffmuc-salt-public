#
# IP{{ proto }} Bird configuration (Salt managed)
#
{% if salt['pillar.get']('netbox:role:name') %}
{%- set role = salt['pillar.get']('netbox:role:name') %}
{% else %}
{%- set role = salt['pillar.get']('netbox:device_role:name') %}
{% endif %}
{%- set node_id = grains['id'] %}
{%- set roles = salt['mine.get'](node_id,'minion_roles')[node_id] %}

{% if 'mine_interval' not in role %}
{% do roles.append(role) %}
{% elif 'mine_interval' not in device_role %}
{% do roles.append(device_role) %}
{% endif %}

{%- set ipaddresses = salt['pillar.get']('netbox:ipaddresses') %}
{%- set sites_config = salt['pillar.get']('netbox:config_context:sites', {}) %}

{% set node_config = dict() %}
{% do node_config.update({ 'ifaces': {} }) %}
{%- for ipaddress in ipaddresses %}
{% if ipaddress['interface']['name'] in node_config['ifaces'] %}
{% do node_config['ifaces'][ipaddress['interface']['name']]['prefixes'].append(ipaddress['address']) %}
{% else %}
{% do node_config['ifaces'].update({ ipaddress['interface']['name']: { 'prefixes': [ipaddress['address']] }}) %}
{% endif %}
{% endfor %}

{% do node_config.update({ 'id': salt['pillar.get']('netbox:custom_fields:node_id') }) %}
define AS_OWN  = 65132;
define LO_IP = {{ salt['ffho_net.get_loopback_ip'](node_config, grains['id'], proto) }};

router id {{ salt['ffho_net.get_router_id'](node_config, grains['id']) }};


# this pseudo-protocol watches all interface up/down events
protocol device {
	scan time 10;
};

# This pseudo-protocol performs synchronization between BIRD's routing
# tables and the kernel. If your kernel supports multiple routing tables
# (as Linux 2.2.x does), you can run multiple instances of the kernel
# protocol and synchronize different kernel tables with different BIRD tables.
protocol kernel {
	scan time 20;           # Scan kernel routing table every 20 seconds

	import none;
	export filter {
		# Do NOT export local unreachable routes for TE purposes
		if proto = "ffho_te" then
			reject;
		{%- if proto == "v4" %}
		# Do NOT export default_originate to local kernel table
		if net = 0.0.0.0/0 && proto = RTS_STATIC then 
                        reject;
		{%- else %}
		if net = ::/0 && proto = RTS_STATIC then
                        reject;
		{%- endif %}
		# Export routes with source address set to loopback IP
		krt_prefsrc = LO_IP;
		accept;
	};
}


#
# Load additiional configuration (IGP, FFRL, ICVPN, 'n stuff)
{%- if proto == "v4" %}
include "/etc/bird/ff-policy.conf";
include "/etc/bird/bird.d/*.conf";
{%- else %}
include "/etc/bird/ff-policy6.conf";
include "/etc/bird/bird6.d/*.conf";
{%- endif %}
