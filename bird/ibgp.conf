#
# FFHO iBGP configuration (Salt managed)
#


template bgp ibgp {
	import filter ibgp_in;
	export filter ibgp_out;

	local as AS_OWN;

	source address LO_IP;

	enable route refresh yes;
	graceful restart yes;
}


{#- Gather information for iBGP sessions #}

{%- set roles = salt['pillar.get']('netbox:config_context:roles') %}
{%- set peers = [] %}
{%- for node in salt['mine.get']('netbox:config_context:roles:router', 'minion_id', tgt_type='pillar')|sort if node != grains['id'] %}
  {%- set peer_roles = salt['mine.get'](node,'minion_roles')[node] %}
  {#- save peers node name, mangle . and - to _ to make bird happy #}
  {%- set peer_config = { 'node' : node | regex_replace('[.-]', '_') } %}
  {%- if 'router' in peer_roles %}
    {#- Skip peer if neither we nor him are a RR #}
    {%- if 'routereflector' not in roles and 'routereflector' not in peer_roles %}
      {%- continue %}
    {%- endif %}

    {#- Is our peer a route reflector? #}
    {%- if 'routereflector' in peer_roles %}
      {%- do peer_config.update ({'rr' : True }) %}
    {%- endif %}
    
    {#- get peers Lo IP #}
    {%- if proto == 'v4' %}
      {%- do peer_config.update ({ 'ip' : salt['mine.get'](node,'minion_address')[node] | regex_replace('/\d+$','') }) %}
    {%- else %}
      {%- do peer_config.update ({ 'ip' : salt['mine.get'](node,'minion_address6')[node] | regex_replace('/\d+$','') }) %}
    {%- endif %}
    {%- do peers.append (peer_config) %}
  {%- endif %}
{%- endfor %}


{#- configure iBGP sessions #}
{% for peer_config in peers %}
protocol bgp {{ peer_config.get ('node') }} from ibgp {
	neighbor {{ peer_config.get ('ip') }} as AS_OWN;

  {%- if 'routereflector' in roles and not 'rr' in peer_config %}
	rr client;
  {%- endif %}
}

{% endfor %}
