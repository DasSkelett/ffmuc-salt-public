-- functions to be used later
function file_exists(name)
   local f=io.open(name,"r")
   if f~=nil then io.close(f) return true else return false end
end
{%- set site_id = salt['pillar.get']('netbox:site:id', 0) %}
{%- if site_id == 1 %}{# ugly, but works for now... #}
    {%- set additional_listener_config = ', interface="vrf_external"' %}
{%- else %}
    {%- set additional_listener_config = '' %}
{%- endif %}
--- now the real config

setACL({'0.0.0.0/0', '::/0'})
-- drop ANY queries sent over udp , not useful for DoT and DoH only servers.
addAction(AndRule({QTypeRule(DNSQType.ANY), TCPRule(false)}), DropAction())
addAction(RegexRule(".*.(10|168.192|(1[6-9]|2[0-9]|3[0-1]).172).in-addr.arpa$"), DropAction())

{% if site_id == 1 -%}
addLocal("127.0.0.1")
addLocal("::", { interface="vrf_external" })
addAction(AndRule({NotRule(makeRule({"2001:678:e68:200::/56", "2001:678:e68:300::/56"})), DSTPortRule(53)}), DropAction())

ssl_cert="/etc/letsencrypt/live/doh.ffmuc.net/fullchain.pem"
ssl_key="/etc/letsencrypt/live/doh.ffmuc.net/privkey.pem"
{%- else %}
addLocal("0.0.0.0")
addLocal("::")

addAction(AndRule({NotRule(makeRule({"ffmuc.net"})), NotRule(makeRule({"127.0.0.1","::1","10.80.0.0/16","10.8.0.0/23","5.1.66.0/24","2001:608:a01::/48","2001:678:e68::/48"})), DSTPortRule(53)}), DropAction())
ssl_cert="/etc/letsencrypt/live/ffmuc.net/fullchain.pem"
ssl_key="/etc/letsencrypt/live/ffmuc.net/privkey.pem"
{%- endif %}

{% if 'webfrontend' in grains.id %}
-- listen for DoT on external interface
addTLSLocal("0.0.0.0", ssl_cert, ssl_key, { reusePort=true{{ additional_listener_config }}, tcpFastOpenQueueSize=20, minTLSVersion="tls1.1" })
addTLSLocal("[::]", ssl_cert, ssl_key, { reusePort=true{{ additional_listener_config }}, tcpFastOpenQueueSize=20, minTLSVersion="tls1.1" })

-- listen for DoH on localhost for reverse proxy
addDOHLocal("127.0.0.1:445", nil, nil, "/dns-query", { reusePort=true, trustForwardedForHeader=true })
addDOHLocal("[::1]:445", nil, nil, "/dns-query", { reusePort=true, trustForwardedForHeader=true })

if not file_exists("/var/lib/dnsdist/providerPrivate.key") then
  infolog("Generate DNSCrypt provider keys.")
  generateDNSCryptProviderKeys("/var/lib/dnsdist/providerPublic.cert", "/var/lib/dnsdist/providerPrivate.key")
end

if not file_exists("/run/dnsdist/resolver.cert") then
  -- this should be recreated regularly => store in /run/dnsdist which gets cleaned at every restart
  infolog("Generate new DNSCrypt keys.")
  generateDNSCryptCertificate("/var/lib/dnsdist/providerPrivate.key", "/run/dnsdist/resolver.cert", "/run/dnsdist/resolver.key", os.date('%Y%m%d', os.time()), os.time(os.date("!*t")), os.time({year=2025, month=2, day=1, hour=00, minute=00}))
end

-- listen for DNSCrypt
addDNSCryptBind("0.0.0.0:8443", "2.dnscrypt-cert.ffmuc.net", "/run/dnsdist/resolver.cert", "/run/dnsdist/resolver.key", { reusePort=true{{ additional_listener_config }} })
addDNSCryptBind("[::]:8443", "2.dnscrypt-cert.ffmuc.net", "/run/dnsdist/resolver.cert", "/run/dnsdist/resolver.key", { reusePort=true{{ additional_listener_config }} })

-- set number of queries to be allowed per second from an IP but exclude localhost
addAction(AndRule({MaxQPSIPRule(300), NotRule(OrRule({makeRule("127.0.0.1"), makeRule("::1")}))}), DropAction())
{% endif %}{# webfrontend in grains.id #}

newServer({address="10.8.0.29:1653", name="web03", weight=3, retries=2, id="23b0121d-91c5-4338-8c5a-cc8ba6f2ca8d"})
newServer({address="10.8.0.30:1653", name="web04", weight=3, retries=2, id="0ed35651-7766-492c-ab44-562e76d395b6"})
newServer({address="10.8.0.32:1653", name="gw04", weight=3, retries=2, id="fec91b13-6d71-4162-92a5-68c197ee99c4"})
newServer({address="10.8.0.33:1653", name="gw05", weight=3, retries=2, id="24d189ad-2070-458d-b34a-7c0c22ba7bcd"})

setWHashedPertubation(3962345)
setServerPolicy(whashed)

-- ask authorative servers for ffmuc.net directly
{%- if site_id == 1 %}
newServer({address="2001:608:a01:ffff::12", name="dns01", pool="auth"})
{%- else %}
-- just a dummy for now; will be done later
--newServer({address="10.8.0.10", name="dns01", pool="auth", id="d0e8196c-c418-4286-86e6-b7c05200b592"})
{%- if 'authorative-dns' in salt['pillar.get']('netbox:tag_list', []) %}
newServer({address="127.0.0.1:553", name="local-auth", pool="auth"}){# bind #}
{%- else %}
newServer({address="5.1.66.255", name="anycast01", pool="auth"})
{%- endif %}
{%- endif %}
addAction({'in.ffmuc.net.', 'ov.ffmuc.net'}, PoolAction("auth"))
addAction({'ext.ffmuc.net'}, PoolAction("auth"))
addAction({'ffmuc.net'}, PoolAction("auth"))
addAction({'ffmuc.bayern'}, PoolAction("auth"))
addAction({'fnmuc.net'}, PoolAction("auth"))
addAction({'freewifi.bayern'}, PoolAction("auth"))
addAction({'freifunk-muenchen.de', 'xn--freifunk-mnchen-8vb.de.'}, PoolAction("auth"))
addAction({'freifunk-muenchen.net'}, PoolAction("auth"))

{#- some stats #}
addAction({'in-addr.arpa'}, NoneAction())

-- OpenNIC
addAction({'bbs','chan','cyb','dns.opennic.glue','dyn','epic','geek','gopher','indy','libre','neo','null','o','opennic.glue','oss','oz','parody','pirate'}, PoolAction("auth"))

-- add cache for X possible entries
pc = newPacketCache(1000000)
getPool(""):setCache(pc)

{%- set dnsdist_webserver = salt["pillar.get"]("netbox:config_context:dnsdist:webserver", []) %}
{%- if "bind" in dnsdist_webserver %}
webserver("{{ dnsdist_webserver["bind"] }}", "{{ dnsdist_webserver["password"] }}", "{{ dnsdist_webserver["api_token"] }}")
{%- endif -%}
{%- set dnsdist_console = salt["pillar.get"]("netbox:config_context:dnsdist:console", []) %}
{%- if "bind" in dnsdist_console %}
controlSocket("{{ dnsdist_console["bind"] }}")
setKey("{{ dnsdist_console["key"] }}")
{%- endif %}

setMaxUDPOutstanding(65535)
setMaxTCPClientThreads(2000)        -- set X(int) to handle number of maximum tcp clients
setMaxTCPConnectionDuration(120)    -- set X(int) for tcp connection duaration from a connected client. X is number of seconds.
setMaxTCPConnectionsPerClient(30)   -- set X(int) for number of tcp connections from a single client. Useful for rate limiting the concurrent connections.
setMaxTCPQueriesPerConnection(1000) -- set X(int) , similiar to addAction(MaxQPSIPRule(X), DropAction())
