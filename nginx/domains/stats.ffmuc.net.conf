upstream grafana_backend {
   server stats.ov.ffmuc.net:3000;
   keepalive 32;
}

proxy_cache_path /var/cache/nginx/grafana_render keys_zone=grafana_render:1024m inactive=1d;

server {
    listen 80;
    listen [::]:80;
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name stats.ffmuc.net graphs.ext.ffmuc.net;
    
    # Force HTTPS connection. This rules is domain agnostic
    if ($scheme != "https") {
       rewrite ^ https://$host$uri permanent;
    }

    location /render/ {
        proxy_pass         https://grafana_backend;
        proxy_redirect     off;

        add_header X-Cache-Status $upstream_cache_status;
        proxy_cache grafana_render;
        proxy_cache_revalidate on;
        proxy_cache_min_uses 3;
        proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_valid 200 1m;
        proxy_ignore_headers Cache-Control expires;

        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $server_name;
    }

    location / {
        proxy_pass         https://grafana_backend;
        proxy_redirect     off;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $server_name;

        # disable compression upstream to enforce sending brotli if client allows it
        proxy_set_header   Accept-Encoding "identity";
    }

{%- if 'VIE01' in salt['pillar.get']('netbox:site:name') %}
    ssl_certificate     /etc/letsencrypt/live/ffmuc.net/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ffmuc.net/privkey.pem;
{%- else %}
    ssl_certificate /etc/letsencrypt/live/{{ domain }}/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/{{ domain }}/privkey.pem; # managed by Certbot
{%- endif %}

    access_log /var/log/nginx/{{ domain }}_access.log;
    error_log  /var/log/nginx/{{ domain }}_error.log;
}
